package com.emqc.jenkins.emqcplugin;

import hudson.Launcher;
import hudson.Extension;
import hudson.FilePath;
import hudson.util.FormValidation;
import hudson.model.AbstractProject;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.tasks.Builder;
import hudson.tasks.BuildStepDescriptor;
import jenkins.tasks.SimpleBuildStep;
import net.sf.json.JSONObject;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.QueryParameter;

import javax.servlet.ServletException;
import java.io.IOException;
import java.util.Map;

public class HelloWorldBuilder extends Builder implements SimpleBuildStep {

	// private final String name;

	private final String iosTaskName;
	private final String iosPath;
	private boolean iosChecked = false;
	private final String androidTaskName;
	private final String androidPath;
	private boolean androidChecked = false;
	// private final String androidTaskName;
	private final String chooseIosDevice;
	private final String chooseAndroidDevice;

	// Fields in config.jelly must match the parameter names in the
	// "DataBoundConstructor"
	@DataBoundConstructor
	public HelloWorldBuilder(EnableTextBlock ios, EnableTextBlock2 android, String chooseIosDevice,
			String chooseAndroidDevice) {
		// this.name = name;
		if (ios != null) {
			this.iosTaskName = ios.iosTaskName;
			this.iosPath = ios.iosPath;
			this.iosChecked = true;
		} else {
			this.iosTaskName = null;
			this.iosPath = null;

		}
		if (android != null) {
			this.androidTaskName = android.androidTaskName;
			this.androidPath = android.androidPath;
			this.androidChecked = true;
		} else {
			this.androidTaskName = null;
			this.androidPath = null;

		}
		this.chooseIosDevice = chooseIosDevice;
		this.chooseAndroidDevice = chooseAndroidDevice;
	}

	public static class EnableTextBlock {
		private String iosTaskName;
		private String iosPath;

		@DataBoundConstructor
		public EnableTextBlock(String iosTaskName, String iosPath) {
			this.iosTaskName = iosTaskName;
			this.iosPath = iosPath;
		}
	}

	public static class EnableTextBlock2 {
		private String androidTaskName;
		private String androidPath;

		@DataBoundConstructor
		public EnableTextBlock2(String androidTaskName, String androidPath) {
			this.androidTaskName = androidTaskName;
			this.androidPath = androidPath;
		}
	}

	/**
	 * We'll use this from the {@code config.jelly}.
	 */
	// public String getName() {
	// return name;
	// }

	public String getIosTaskName() {
		return iosTaskName;
	}

	public boolean getIosChecked() {
		return iosChecked;
	}

	public String getAndroidTaskName() {
		return androidTaskName;
	}

	public boolean getAndroidChecked() {
		return androidChecked;
	}

	public String getChooseIosDevice() {
		return chooseIosDevice;
	}

	public String getChooseAndroidDevice() {
		return chooseAndroidDevice;
	}

	public String getIosPath() {
		return iosPath;
	}

	public String getAndroidPath() {
		return androidPath;
	}

	@Override
	public void perform(Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener) {
		// This is where you 'build' the project.
		// Since this is a dummy, we just say 'hello world' and call that a
		// build.

		// This also shows how you can consult the global configuration of the
		// builder
		// if (getDescriptor().getUseFrench())
		// listener.getLogger().println("Bonjour, " + name + "!");
		// else
		// listener.getLogger().println("Hello, " + name + "!");
		listener.getLogger().println("rtx, " + getDescriptor().getRtx() + "!");
		listener.getLogger().println("password, " + getDescriptor().getPassword() + "!");

		listener.getLogger().println("iosTaskName, " + iosTaskName + "!");
		listener.getLogger().println("androidTaskName, " + androidTaskName + "!");
		listener.getLogger().println("iosPath, " + iosPath + "!");
		listener.getLogger().println("androidPath, " + androidPath + "!");
		listener.getLogger().println("chooseAndroidDevice, " + chooseAndroidDevice + "!");
		listener.getLogger().println("chooseIosDevice, " + chooseIosDevice + "!");
		
		//JSONObject sr=HttpRequest.sendPost("http://localhost:8080/emqc-platform/login", "userName="+getDescriptor().getRtx()+"&passWord="+getDescriptor().getPassword());
		org.json.JSONObject sr=HttpRequest.sendPost("http://localhost:8080/emqc-platform/login", "userName="+getDescriptor().getRtx()+"&passWord="+getDescriptor().getPassword());
		listener.getLogger().println("uuId, " + sr.get("uuId").toString() + "!");
		org.json.JSONObject sr2=HttpPostUploadUtil.initClass("http://localhost:8080/emqc-platform/ios_uploadapk.action",sr.get("uuId").toString(),iosPath);
		listener.getLogger().println("devices, " + sr2.get("devices") + "!");
		org.json.JSONObject sr3=HttpRequest.sendPost("http://localhost:8080/emqc-platform/ios_taskrun.action", "name="+iosTaskName+"&testPhones="+chooseIosDevice+"&testPackage="+sr2.get("packageName").toString()+"&appPath="+sr2.get("appPath").toString()+"&appName="+sr2.get("appName")+"&appVersion="+sr2.get("appVersion").toString()+"&uuid="+sr.get("uuId").toString());
		listener.getLogger().println("success, " + sr3.get("success").toString() + "!");
	}

	// Overridden for better type safety.
	// If your plugin doesn't really define any property on Descriptor,
	// you don't have to do this.
	@Override
	public DescriptorImpl getDescriptor() {
		return (DescriptorImpl) super.getDescriptor();
	}

	@Extension // This indicates to Jenkins that this is an implementation of an
				// extension point.
	public static final class DescriptorImpl extends BuildStepDescriptor<Builder> {

		// private boolean useFrench;
		private String rtx;
		private String password;

		/**
		 * In order to load the persisted global configuration, you have to call
		 * load() in the constructor.
		 */
		public DescriptorImpl() {
			load();
		}

		// public FormValidation doCheckName(@QueryParameter String value)
		// throws IOException, ServletException {
		// if (value.length() == 0)
		// return FormValidation.error("Please set a name");
		// if (value.length() < 4)
		// return FormValidation.warning("Isn't the name too short?");
		// return FormValidation.ok();
		// }

		public boolean isApplicable(Class<? extends AbstractProject> aClass) {
			// Indicates that this builder can be used with all kinds of project
			// types
			return true;
		}

		/**
		 * This human readable name is used in the configuration screen.
		 */
		public String getDisplayName() {
			return "EMQC";
		}

		@Override
		public boolean configure(StaplerRequest req, JSONObject formData) throws FormException {
			// To persist global configuration information,
			// set that to properties and call save().
			// useFrench = formData.getBoolean("useFrench");
			rtx = formData.getString("rtx");
			password = formData.getString("password");
			// ^Can also use req.bindJSON(this, formData);
			// (easier when there are many fields; need set* methods for this,
			// like setUseFrench)
			save();
			return super.configure(req, formData);
		}

		/**
		 * This method returns true if the global configuration says we should
		 * speak French.
		 *
		 * The method name is bit awkward because global.jelly calls this method
		 * to determine the initial state of the checkbox by the naming
		 * convention.
		 */
		// public boolean getUseFrench() {
		// return useFrench;
		// }

		public String getRtx() {
			return rtx;
		}

		public String getPassword() {
			return password;
		}

	}
}
